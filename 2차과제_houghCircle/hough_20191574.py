# -*- coding: utf-8 -*-
"""20191574.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13xmhRMIz5LoUnyMn-mivRaQ3zG0hW-kn
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import cv2

image = cv2.imread('coins.png')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
height, width = gray.shape
print(height, width)

plt.imshow(gray, cmap='gray')
plt.show()

img_sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
img_sobel_x = cv2.convertScaleAbs(img_sobel_x)

img_sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
img_sobel_y = cv2.convertScaleAbs(img_sobel_y)


img_sobel = cv2.addWeighted(img_sobel_x, 1, img_sobel_y, 1, 0);

plt.figure(figsize=(14,7))
plt.subplot(131)
plt.imshow(img_sobel_x, cmap='gray')

plt.subplot(132)
plt.imshow(img_sobel_y, cmap='gray')

plt.subplot(133)
plt.imshow(img_sobel, cmap='gray')

plt.show()

threshold, binary_img = cv2.threshold(img_sobel, 245, 255, cv2.THRESH_BINARY)

print(threshold)
plt.imshow(binary_img, cmap='gray')
plt.show()

"""아래 함수를 작성할 시 opencv 라이브러리를 사용하지 말고 모든 내용을 직접 작성하시기 바람"""

def Hough_Circles(input_img, threshold, min_R, max_R):
    width = len(input_img)
    height = len(input_img[0])
    theta = np.arange(360)*np.pi/180
    edges = np.argwhere(input_img[:,:])
    area = 15

    radius_range = max_R - min_R
    X = np.zeros((max_R, width+2*max_R, height+2*max_R))
    Y = np.zeros((max_R, width+2*max_R, height+2*max_R))

    for val in range(radius_range):
        r = min_R+val
        cirArr = np.zeros((2*(r+1), 2*(r+1)))
        m = r+1
        n = r+1
        for angle in theta:
            x = int(np.round(r*np.cos(angle)))
            y = int(np.round(r*np.sin(angle)))
            cirArr[m+x, n+y] = 1
        constant = np.argwhere(cirArr).shape[0]
        for x,y in edges:
            A = [x-m+max_R, x+m+max_R]
            B = [y-n+max_R, y+n+max_R]
            X[r,A[0]:A[1],B[0]:B[1]] += cirArr
        X[r][X[r]<threshold*constant/r] = 0

    for r,x,y in np.argwhere(X):
        temp = X[r-area:r+area, x-area:x+area, y-area:y+area]
        try:
            p,a,b = np.unravel_index(np.argmax(temp),temp.shape)
        except:
            continue
        Y[r+(p-area), x+(a-area), y+(b-area)] = 1

    return Y[:, max_R:-max_R, max_R:-max_R]

"""아래 함수를 작성할 시 opencv라이브러리를 사용해도 됨"""

def display_Circles(input_img):
    copy_img = cv2.imread('coins.png')
    f = plt.figure()
    plt.imshow(copy_img)
    cirArr = np.argwhere(input_img)
    circle = []
    for r,x,y in cirArr:
        circle.append(plt.Circle((y,x), r, color=(0,1,0), fill=False))
        f.add_subplot(111).add_artist(circle[-1])
    plt.show()

"""주어진 동전을 읽고 결과를 출력하시오"""

hough_img = Hough_Circles(binary_img, 40, 70, 95)
display_Circles(hough_img)