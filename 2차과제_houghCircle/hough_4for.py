# -*- coding: utf-8 -*-
"""20191574.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/101VNjKuZ0n4ocOuGI1O7NQKZXnStNfGV
"""

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np
import cv2

image = cv2.imread('coins.png')
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
height, width = gray.shape
print(height, width)

plt.imshow(gray, cmap='gray')
plt.show()

img_sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=3)
img_sobel_x = cv2.convertScaleAbs(img_sobel_x)

img_sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=3)
img_sobel_y = cv2.convertScaleAbs(img_sobel_y)


img_sobel = cv2.addWeighted(img_sobel_x, 1, img_sobel_y, 1, 0);

plt.figure(figsize=(14,7))
plt.subplot(131)
plt.imshow(img_sobel_x, cmap='gray')

plt.subplot(132)
plt.imshow(img_sobel_y, cmap='gray')

plt.subplot(133)
plt.imshow(img_sobel, cmap='gray')

plt.show()

threshold, binary_img = cv2.threshold(img_sobel, 245, 255, cv2.THRESH_BINARY)

print(threshold)
plt.imshow(binary_img, cmap='gray')
plt.show()

"""아래 함수를 작성할 시 opencv 라이브러리를 사용하지 말고 모든 내용을 직접 작성하시기 바람"""

def Hough_Circles(input_img): 
  circles = []
  rows = input_img.shape[0] 
  cols = input_img.shape[1] 
  
  sin = dict() 
  cos = dict() 
  
  for angle in range(0,360): 
    sin[angle] = np.sin(angle * np.pi/180) 
    cos[angle] = np.cos(angle * np.pi/180) 
          
  length=int(rows/2)
  radius = [70, 75, 83, 84, 95]

  for r in radius:
    acc_cells = np.full((rows,cols), fill_value=0, dtype=np.uint64)

    for x in range(rows): 
      for y in range(cols): 
        if input_img[x][y] == 255:
          for angle in range(0,360): 
            b = y - round(r * sin[angle]) 
            a = x - round(r * cos[angle]) 
            if a >= 0 and a < rows and b >= 0 and b < cols: 
              acc_cells[a][b] += 1
                            
    acc_cell_max = np.amax(acc_cells)
      
    if(acc_cell_max > 250):              
      acc_cells[acc_cells < 250] = 0  
        
      for i in range(rows): 
        for j in range(cols): 
          if(i > 0 and j > 0 and i < rows-1 and j < cols-1 and acc_cells[i][j] >= 150):
            avg_sum = np.float32((acc_cells[i][j]+acc_cells[i-1][j]+acc_cells[i+1][j]+
                                  acc_cells[i][j-1]+acc_cells[i][j+1]+acc_cells[i-1][j-1]+
                                  acc_cells[i-1][j+1]+acc_cells[i+1][j-1]+acc_cells[i+1][j+1])/9) 
            if(avg_sum >= 33):
              circles.append((i,j,r))
              acc_cells[i:i+5,j:j+7] = 0
  return circles

"""아래 함수를 작성할 시 opencv라이브러리를 사용해도 됨"""

def display_Circles(image, circles):
  for c in circles:
    cv2.circle(image, (c[1], c[0]), c[2], (0, 255, 0), 3)
    cv2.rectangle(image, (c[1]-2,c[0]-2), (c[1]-2,c[0]-2), (255, 0, 0), 6)
  
  return image

"""주어진 동전을 읽고 결과를 출력하시오"""

circles = Hough_Circles(binary_img)
img = display_Circles(image, circles)

plt.imshow(img)